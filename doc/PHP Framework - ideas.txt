
CodeIgniter / Laravel / Slim / Symphony clone thing
===================================================

  Should have all the basic features of the above, but with
  easier to understand structure and be extendable.

  * PHP7.1+ Compatible
  * Composer driven in all things
  * Flexible Plugins
  * Controller->Model->View support

  * Route requests (support many routers via plugins)
  * Template Engine support (support for MANY template engines)
    > Twig :: https://twig.symfony.com
    > Dwoo :: http://dwoo.org :: https://github.com/dwoo-project/dwoo
    > Plates :: http://platesphp.com/

##############################################################################################################################

TODO
====
  * How to show Error pages? 4xx, 5xx series responses should have nice error page instead of just the response code.

##############################################################################################################################

Request Lifecycle
=================

  1.  Receive request from Client browser to Apache
  2.  Apache loads "bootstrap.php" file and starts PHP processing
  3.  Bootstrap initializes Framework, and starts to process the request
      - Create $app class (PSR-8 :: extends \Psr\Hug\Huggable)
        BOOTSTRAP PHASE:
          - Register Framework Global Helper Functions
          - Load Config

          - Load Factories
            - Cache Factory        - Cache Manager (PSR-6 / PSR-16)
            - HTTP Factory         - HTTP Manager (PSR-17 :: guzzle)
            - Container Factory    - Container Manager (PSR-11 :: http://container.thephpleague.com/)
            - Event Factory        - Event Manager (PSR-14)
            - ? Database Factory     - Database Manager

          - Register "User" Global Functions

          - Load Template Engine driver
          - Load Hook Manager

          - Create HTTP Server Request, Response              (PSR-7                Guzzle )
            > Populate Server Request with data

        PRE-PROCESS PHASE:
          - Framework Hooks (onBeforeRequest)
            - Load & Create Hooks one by one
            - Foreach Hook call $hook->run(); if == false, terminate running hooks

        PROCESS PHASE:
          - Execute Global Before Middlewares
          - Match Route
            - Execute Routes Before Middlewares
            - If Cached version
              Y: Serve cached data
              N: Load Contreoller
                 - Call Controller->handle()
                   - Load Model
                   - Process data ...
                   - Load View
            - Execute Routes After Middlewares
          - Execute all After Middlewares

        POST-PROCESS PHASE:
          - Framework Hooks (onAfterRequest)
            - Load & Create Hooks one by one
            - Foreach Hook call $hook->run(); if == false, terminate running hooks

  4.  Send response to Client

------------------------------------------------------------------------------------------------------------------------------

Folder structure (skeleton)

/<AppName>
  /src
    /app
      /Config
      /Middlewares
      /Controllers
      /Views
        /Templates
        /Errors
        /Pages
          /{sub-page}
      /Models
      globals.php
    /public
    /storage
      /logs
      /cache
    /vendor
      /Nofuzz/spin-framework
    composer.json
  /tests

------------------------------------------------------------------------------------------------------------------------------

Using "TWIG" Templates
====================

  // https://twig.symfony.com/doc/2.x/api.html

  // Twig Loader
  $twigLoader = new Twig_Loader_Filesystem( $app->getAppPath().'/Views/Templates');

  // Set Twig environment options
  $twig = new Twig_Environment($twigLoader, array(
      'cache' => $app->getAppPath().'/storage/cache',
  ));

  // Create pageData array
  $pageData['app'] = $app;
  $pageData['var1'] = "value1";
  $pageData['var2'] = "value2";

  // Load & Render template
  $html = $twig->render('TheFileName.html', $pageData); // loads "/Views/Templates/TheFileName.html"

  // Send response
  response($html);

------------------------------------------------------------------------------------------------------------------------------

Using "Plates" Templates
======================

  // Create pageData array
  $pageData['app'] = $app;
  $pageData['var1'] = "value1";
  $pageData['var2'] = "value2";

  // Create new Plates instance
  $engine = new League\Plates\Engine( $app->getAppPath().'/Views/Pages',

  // Sets the default file extension to ".html" after engine instantiation
  $engine->setFileExtension('html');

  // Add any additional folders
  $engine->addFolder('Errors', $app->getAppPath().'/Views/Errors');

  // Render a template
  $html = $engine->render('TheFileName', $pageData );  // loads "/Views/Pages/TheFileName.html"

  // Send response
  response($html);

------------------------------------------------------------------------------------------------------------------------------

Adding a Hook in the config/{env}/hooks.json
=============================================
  {
    "onBeforeRequest": [
      "\app\hooks\MyPreHook"
    ]
  },
  {
    "onAfterRequest": [
      "\app\hooks\MyPreHook"
    ]
  }
